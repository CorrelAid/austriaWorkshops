library(lubridate)
library(openxlsx)
library(stringr)
library(readr)
library(tidytext)
library(igraph)
library(kableExtra)
library(tm)
library(ggthemes)
library(magrittr)
library(igraph)
library(rtweet)
# read data
hashtag_result <- read.csv("correlaid_names.csv")
head(hashtag_result)
## all to lower
hashtag_result$tweet <- str_to_lower(hashtag_result$tweet)
hashtag_result$username <- str_to_lower(hashtag_result$username)
## delete NAs & duplicates
hashtag_result <- filter(hashtag_result, !is.na(username))
hashtag_result <- hashtag_result %>% distinct(created_at, tweet, author.id, .keep_all = TRUE)
links <- str_extract_all(hashtag_result$tweet, "@\\w*\\b")
links <- sapply(links, function(s) paste(s, collapse=';'))
links <- gsub("[@]", "", links)
df <- data.frame(cbind( hashtag_result$username, links))
edgelist <- separate_rows(df, links, convert = TRUE)
# delete tweets without references
edgelist <- filter(edgelist, links != "")
## write edgelist
write.csv(edgelist, "edgelist.csv", row.names = FALSE)
View(edgelist)
### create weights
tw_net_w <- as.data.frame(table(edgelist))
tw_net_w <- filter(tw_net_w, Freq > 0)
## name and set class
colnames(tw_net_w) <- c("Source", "Target", "Weight")
tw_net_w$Source <- as.character(tw_net_w$Source)
tw_net_w$Target <- as.character(tw_net_w$Target)
tw_net_w$Weight <- as.numeric(tw_net_w$Weight)
## subset no self-reference (loops)
tw_net_w <- subset(tw_net_w, !ifelse(tw_net_w$Source == tw_net_w$Target, TRUE, FALSE))
## write network matrix with weigths
write.csv(tw_net_w, "network_matrix.csv", row.names = FALSE)
## create network from matrix / dataframe to keep weights as numeric...
net_mat <- as.data.frame(tw_net_w)
net_weighted <- graph_from_data_frame(net_mat, directed = TRUE)
set.seed(1)
plot(net_weighted,
layout = layout_nicely(net_weighted),
#vertex.size = V(net_weighted)$type*10,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = "grey",
edge.arrow.size = 0.2)
### now the interactive networkw
library(visNetwork)
net <- net_weighted
nodes <- data.frame(id = V(net)$name)
# add labels on nodes
nodes$label <- V(net)$name
el <- data.frame(get.edgelist(net))
edges <- data.frame(from = el$X1, to = el$X2,
# add labels on edges
label = c("reference"),
# arrows
arrows = c("to"),
color = c("yellow"))
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE) %>%
visIgraphLayout()
plot
visSave(plot, file = "plot.html")
plot(net_weighted,
layout = layout_nicely(net_weighted),
#vertex.size = V(net_weighted)$type*10,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = "grey",
edge.arrow.size = 0.2)
plot(net_weighted,
layout = layout_with_dh(net_weighted),
#vertex.size = V(net_weighted)$type*10,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = "grey",
edge.arrow.size = 0.2)
V(net_weighted)$in_degree <- degree(net_weighted, mode =c("in"))
plot(net_weighted,
layout = layout_with_dh(net_weighted),
vertex.size = V(net_weighted)$in_degree,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = "grey",
edge.arrow.size = 0.2)
# size adding value
nodes$value = V(net)$in_degree
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE) %>%
visIgraphLayout()
plot
# size adding value
nodes$value = V(net)$in_degree
View(nodes)
# size adding value
nodes$value <- V(net)$in_degree
View(nodes)
V(net)$in_degree
# size adding value
nodes$value <- V(net_weighted)$in_degree
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = nodes$in_degree)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE) %>%
visIgraphLayout()
plot
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = nodes$in_degree)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
plot <- visNetwork(nodes, edges, idToLabel=T, height = "1000px", width = "100%") %>%
visNodes(font = list (size = nodes$in_degree)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
plot <- visNetwork(nodes, edges, idToLabel=T, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
edges <- data.frame(from = el$X1, to = el$X2,
# add labels on edges
label = c("reference"),
# arrows
arrows = c("to"),
color = c("yellow"),
width = E(net_weighted)$weight)
E(net_weighted)$weight
E(net_weighted)
net_weighted
edges <- data.frame(from = el$X1, to = el$X2,
# add labels on edges
label = c("reference"),
# arrows
arrows = c("to"),
color = c("yellow"),
width = E(net_weighted)$Weight)
plot <- visNetwork(nodes, edges, idToLabel=T, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
# conditional attributes
edges$label <- ifelse(E(net_weighted)$Weight <= 3, "weak reference", "strong reference")
plot <- visNetwork(nodes, edges, idToLabel=T, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
nodes$shape <- ifelse(V(net_weighted)$name %contains% "bellen", "square", "circle")
nodes$shape <- ifelse(V(net_weighted)$name %in% "bellen", "square", "circle")
nodes$shape
table(nodes$shape)
nodes$shape <- ifelse("bellen" %in% V(net_weighted)$name, "square", "circle")
nodes$shape
table(nodes$shape)
nodes$shape <- ifelse("bell" %in% V(net_weighted)$name, "square", "circle")
table(nodes$shape)
V(net_weighted)$name
visSave(plot, file = "plot.html")
# clean environment
gc()
rm(list = ls())
# set working directory
setwd("C:/Users/arnel/OneDrive/Desktop/git projects/correlaid_wien/austriaWorkshops/network")
# load packages
library(dplyr)
library(tidyverse)
library(readxl)
library(data.table)
library(zoo)
library(lubridate)
library(openxlsx)
library(stringr)
library(readr)
library(tidytext)
library(igraph)
library(kableExtra)
library(tm)
library(ggthemes)
library(magrittr)
library(igraph)
library(rtweet)
# read data
hashtag_result <- read.csv("twitter_data.csv")
head(hashtag_result)
# some cleaning
## all to lower
hashtag_result$tweet <- str_to_lower(hashtag_result$tweet)
hashtag_result$username <- str_to_lower(hashtag_result$username)
## delete NAs & duplicates
hashtag_result <- filter(hashtag_result, !is.na(username))
hashtag_result <- hashtag_result %>% distinct(created_at, tweet, author.id, .keep_all = TRUE)
##create edgelist of authors and links that the tweets referred to with "@" as in references or retweets
links <- str_extract_all(hashtag_result$tweet, "@\\w*\\b")
links <- sapply(links, function(s) paste(s, collapse=';'))
links <- gsub("[@]", "", links)
df <- data.frame(cbind( hashtag_result$username, links))
edgelist <- separate_rows(df, links, convert = TRUE)
# delete tweets without references
edgelist <- filter(edgelist, links != "")
# create weighted edgelist ()
### create weights
edgelist_w <- as.data.frame(table(edgelist))
edgelist_w <- filter(edgelist_w, Freq > 0)
## name variables and set class
colnames(edgelist_w) <- c("Source", "Target", "Weight")
edgelist_w$Source <- as.character(edgelist_w$Source)
edgelist_w$Target <- as.character(edgelist_w$Target)
edgelist_w$Weight <- as.numeric(edgelist_w$Weight)
## subset no self-reference (loops)
edgelist_w <- subset(edgelist_w, !ifelse(edgelist_w$Source == edgelist_w$Target, TRUE, FALSE))
## write network matrix with weigths
write.csv(edgelist_w, "edgelist_weighted.csv", row.names = FALSE)
## create network from matrix / dataframe and keep weights as numeric...
net_mat <- as.data.frame(edgelist_w)
net_weighted <- graph_from_data_frame(net_mat, directed = TRUE)
set.seed(1)
plot(net_weighted,
layout = layout_with_dh(net_weighted),
# vertex.size = V(net_weighted)$in_degree,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = "grey",
edge.arrow.size = 0.2)
V(net_weighted)$in_degree <- degree(net_weighted, mode =c("in"))
### now the interactive networkw
library(visNetwork)
net <- net_weighted
nodes <- data.frame(id = V(net)$name)
# add labels on nodes
nodes$label <- V(net)$name
# add groups on nodes
#nodes$group <- ifelse(nodes$id %in% temp_conflict$actor, 1, 0)
# size adding value
nodes$value <- V(net_weighted)$in_degree
# control shape of nodes
#nodes$shape <- ifelse(nodes$group == 1, "circle", "square")
# color
#nodes$color <- ifelse(V(net)$type == 1, "darkgrey", "lightgrey")
el <- data.frame(get.edgelist(net))
edges <- data.frame(from = el$X1, to = el$X2,
# add labels on edges
label = c("reference"),
# arrows
arrows = c("to"),
color = c("yellow"),
width = E(net_weighted)$Weight)
# conditional attributes
#edges$label <- ifelse(E(net_weighted)$Weight <= 3, "weak reference", "strong reference")
nodes$shape <- ifelse("bell" %in% V(net_weighted)$name, "square", "circle")
table(nodes$shape)
plot <- visNetwork(nodes, edges, idToLabel=T, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
visSave(plot, file = "plot.html")
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
table(nodes$shape)
net <- net_weighted
nodes <- data.frame(id = V(net)$name)
# add labels on nodes
nodes$label <- V(net)$name
# add groups on nodes
#nodes$group <- ifelse(nodes$id %in% temp_conflict$actor, 1, 0)
# size adding value
nodes$value <- V(net_weighted)$in_degree
# control shape of nodes
#nodes$shape <- ifelse(nodes$group == 1, "circle", "square")
# color
#nodes$color <- ifelse(V(net)$type == 1, "darkgrey", "lightgrey")
el <- data.frame(get.edgelist(net))
edges <- data.frame(from = el$X1, to = el$X2,
# add labels on edges
label = c("reference"),
# arrows
arrows = c("to"),
color = c("yellow"),
width = E(net_weighted)$Weight)
# conditional attributes
#edges$label <- ifelse(E(net_weighted)$Weight <= 3, "weak reference", "strong reference")
#nodes$shape <- ifelse("bell" %in% V(net_weighted)$name, "square", "circle")
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
visSave(plot, file = "plot.html")
plot
nodes$id
presse <- c("derstandardat", "orf", "hartaberfair", "diepressecom", "ndr", "gi_presse", "tachlesnews", "kleinezeitung", "morgenpost")
nodes$group <- ifelse(nodes$id %in% presse, "square", "circle")
presse <- c("derstandardat", "orf", "hartaberfair", "diepressecom", "ndr", "gi_presse", "tachlesnews", "kleinezeitung", "morgenpost")
nodes$group <- ifelse(nodes$id %in% presse, 1, 0)
# control shape of nodes
nodes$shape <- ifelse(nodes$group == 1, "square", "circle")
# color
nodes$color <- ifelse(V(net)$group == 1, "darkgrey", "lightgrey")
# color
nodes$color <- ifelse(nodes$group == 1, "darkgrey", "lightgrey")
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
# color
nodes$color <- ifelse(nodes$group == 1, "black", "lightgrey")
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
# size adding value
nodes$size <- V(net_weighted)$in_degree
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
# control shape of nodes
nodes$shape <- ifelse(nodes$group == 1, "square", "dot")
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
visSave(plot, file = "plot.html")
## communities
communities(net_weighted)
## communities
modularity(net_weighted)
## communities
cluster_walktrap(net_weighted)
## communities
clp <- cluster_walktrap(net_weighted)
V(net_weighted)$community <- clp$membership
V(net_weighted)$community
# determine colors
rain <- rainbow(42, alpha=.5)
E(g)$color <- apply(as.data.frame(get.edgelist(g)), 1,
function(x) ifelse(V(g)$community[x[1]] == V(g)$community[x[2]],
rain[V(g)$community[x[1]]], '#00000000'))
g <- net_weighted
V(g)$community <- clp$membership
E(g)$color <- apply(as.data.frame(get.edgelist(g)), 1,
function(x) ifelse(V(g)$community[x[1]] == V(g)$community[x[2]],
rain[V(g)$community[x[1]]], '#00000000'))
plot(net_weighted,
layout = layout_with_dh(net_weighted),
# vertex.size = V(net_weighted)$in_degree,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = E(g)$color,
edge.arrow.size = 0.2)
E(g)$color
V(net_weighted)$community <- clp$membership
V(net_weighted)
E(net_weighted)
V(net_weighted)$community
V(net_weighted)$community[1]
E(net_weighted)
E(net_weighted)[1]
V(net_weighted)$community
clp$membership
cluster_walktrap(net_weighted)
V(net_weighted)$community <- clp$groups
V(net_weighted)$color <- rain[V(net_weighted$community]
source("C:/Users/arnel/OneDrive/Desktop/git projects/correlaid_wien/austriaWorkshops/network/network.R", echo=TRUE)
rain[V(net_weighted$community]
# determine colors
rain <- rainbow(42, alpha=.5)
rain
V(net_weighted$community
V(net_weighted)$community <- clp$groups
V(net_weighted)$color <- rain[V(net_weighted$community]
rain[V(net_weighted$community]
V(net_weighted)$color <- rain[V(net_weighted$community)]
V(net_weighted)$color <- rain[V(net_weighted)$community)]
V(net_weighted)$color <- rain[V(net_weighted)$community]
E(net_weighted)$color <- apply(as.data.frame(get.edgelist(net_weighted)), 1,
function(x) ifelse(V(net_weighted)$community[x[1]] == V(net_weighted)$community[x[2]],
rain[V(net_weighted)$community[x[1]]], '#00000000'))
plot(net_weighted, vertex.size=4, vertex.label=NA, edge.color=E(net_weighted)$color)
## communities
clp <- cluster_walktrap(net_weighted)
V(net_weighted)$community <- clp$groups
# determine colors
rain <- rainbow(42, alpha=.5)
V(net_weighted)$community <- clp$membership
# determine colors
rain <- rainbow(42, alpha=.5)
E(net_weighted)$color <- apply(as.data.frame(get.edgelist(net_weighted)), 1,
function(x) ifelse(V(net_weighted)$community[x[1]] == V(net_weighted)$community[x[2]],
rain[V(net_weighted)$community[x[1]]], '#00000000'))
plot(net_weighted, vertex.size=4, vertex.label=NA, edge.color=E(net_weighted)$color)
net_weighted <- graph_from_data_frame(net_mat, directed = TRUE)
## communities
clp <- cluster_walktrap(net_weighted)
V(net_weighted)$community <- clp$membership
# determine colors
rain <- rainbow(42, alpha=.5)
E(net_weighted)$color <- apply(as.data.frame(get.edgelist(net_weighted)), 1,
function(x) ifelse(V(net_weighted)$community[x[1]] == V(net_weighted)$community[x[2]],
rain[V(net_weighted)$community[x[1]]], '#00000000'))
plot(net_weighted,
layout = layout_with_dh(net_weighted),
# vertex.size = V(net_weighted)$in_degree,
vertex.size = 5,
edge.width = E(net_weighted)$Weight,
edge.color = E(net_weighted)$color,
edge.arrow.size = 0.2)
as.data.frame(get.edgelist(net_weighted))
V(net_weighted)$community
V(net_weighted)$community[x[1]]
E(net_weighted)$color <-
E(net_weighted)
E(net_weighted)$color <-
E(net_weighted)$name
E(net_weighted)$name
E(net_weighted)
E(net_weighted)[1]
clp
View(clp)
clp$edges
clp$names
plot(clp, net_weighted)
plot(clp, net_weighted,
edge.color = c("black", "red")[crossing(x, y) + 1],)
plot(clp, net_weighted,
edge.color = c("black", "red")[crossing(clp, net_weighted) + 1],)
plot(clp, net_weighted,
edge.color = c("black", "red")[crossing(clp, net_weighted) + 1],
vertex.size = 5)
## communities
clp <- cluster_walktrap(net_weighted)
net_weighted$com <- clp$membership
# color
nodes$color <-
rain
# color
nodes$color <-
rain
rain
# color
nodes$color <- rain[V(net_weighted)$com]
V(net_weighted)$com
net_weighted$com <- clp$membership
clp$membership
net_weighted$com
# color
nodes$color <- rain[V(net_weighted)$com]
v(net_weighted)$color <- rain[V(net_weighted)$com]
V(net_weighted)$color <- rain[V(net_weighted)$com]
V(net_weighted)$color <- rain[V(net_weighted)$com]
V(net_weighted)$color
rain[V(net_weighted)$com]
V(net_weighted)$com
clp$membership
## communities
clp <- cluster_walktrap(net_weighted)
V(net_weighted)$community <- clp$membership
clp$membership
unique(clp$membership)
arrange(unique(clp$membership))
lenght((clp$membership))
length((clp$membership))
length(unique((clp$membership)))
rain <- rainbow(42, alpha=.5)
V(net_weighted)$color <- rain[V(net_weighted)$community]
V(net_weighted)$color
# color
nodes$color <- V(net_weighted)$color
plot <- visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visNodes(font = list (size = 25)) %>%
visIgraphLayout(layout = "layout_with_dh") %>%
visPhysics(stabilization = FALSE) %>%
visEdges(smooth = FALSE)
plot
install.packages("palmerpenguins")
